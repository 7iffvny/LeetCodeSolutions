Problem
Given a string s of '(' , ')' and lowercase English characters.

Your task is to remove the minimum number of parentheses ( '(' or ')', in any positions ) so that the resulting parentheses string is valid and return any valid string.

Formally, a parentheses string is valid if and only if:

It is the empty string, contains only lowercase characters, or
It can be written as AB (A concatenated with B), where A and B are valid strings, or
It can be written as (A), where A is a valid string.

Solution:
class Solution {
    public String minRemoveToMakeValid(String s) {
        
        StringBuilder sb = new StringBuilder();
        int openParen = 0;
        
        for (char c : s.toCharArray()) {
            if (c == '(') {
                openParen++;
            } else if (c == ')') {
                if (openParen == 0) continue;
                openParen--;
            }
            sb.append(c);   
        }
        
        StringBuilder result = new StringBuilder();
        
        for (int i = sb.length()-1; i>=0; i--) {
            if (sb.charAt(i) == '(' && openParen-- > 0) continue;
            result.append(sb.charAt(i));
        }
        return result.reverse().toString();
    }
}
